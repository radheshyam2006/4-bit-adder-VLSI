$date
	Wed Nov 20 14:47:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module wrap_tb $end
$var wire 5 ! c [4:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 1 $ cin $end
$var reg 1 % clk $end
$var integer 32 & i [31:0] $end
$scope module uut $end
$var wire 4 ' a [3:0] $end
$var wire 4 ( b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 % clk $end
$var wire 5 ) df [4:0] $end
$var wire 4 * db [3:0] $end
$var wire 4 + da [3:0] $end
$var wire 5 , c [4:0] $end
$scope module carry $end
$var wire 1 % clk $end
$var wire 1 - i $end
$var reg 1 . out $end
$upscope $end
$scope module cla_inst $end
$var wire 1 $ cin $end
$var wire 4 / B [3:0] $end
$var wire 4 0 A [3:0] $end
$var reg 5 1 F [4:0] $end
$var reg 5 2 ci [4:0] $end
$var reg 4 3 g [3:0] $end
$var reg 4 4 p [3:0] $end
$upscope $end
$scope module da_inst $end
$var wire 1 % clk $end
$var wire 4 5 i [3:0] $end
$var reg 4 6 out [3:0] $end
$upscope $end
$scope module db_inst $end
$var wire 1 % clk $end
$var wire 4 7 i [3:0] $end
$var reg 4 8 out [3:0] $end
$upscope $end
$scope module sum $end
$var wire 1 % clk $end
$var wire 4 9 i [3:0] $end
$var reg 4 : out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx :
bx 9
bx 8
b1 7
bx 6
b100 5
bx 4
bx 3
bx1 2
bx 1
bx 0
bx /
x.
x-
bx ,
bx +
bx *
bx )
b1 (
b100 '
b0 &
0%
1$
b1 #
b100 "
bx !
$end
#5
0-
b110 9
b110 )
b110 1
b11 2
b0 3
b101 4
b100 +
b100 0
b100 6
b1 *
b1 /
b1 8
1%
#10
0%
b1101 #
b1101 (
b1101 7
b11 "
b11 '
b11 5
b1 &
#15
1-
b1 9
b10001 )
b10001 1
b11111 2
b1 3
b1110 4
0.
b110 !
b110 ,
b110 :
b1101 *
b1101 /
b1101 8
b11 +
b11 0
b11 6
1%
#20
0%
b10 #
b10 (
b10 7
b101 "
b101 '
b101 5
b10 &
#25
0-
b1000 9
b1000 )
b1000 1
b1111 2
b0 3
b111 4
b101 +
b101 0
b101 6
b10 *
b10 /
b10 8
b1 :
b10001 !
b10001 ,
1.
1%
#30
0%
b110 #
b110 (
b110 7
b1101 "
b1101 '
b1101 5
b11 &
#35
1-
b100 9
b10100 )
b10100 1
b11111 2
b100 3
b1011 4
0.
b1000 !
b1000 ,
b1000 :
b110 *
b110 /
b110 8
b1101 +
b1101 0
b1101 6
1%
#40
0%
b1100 #
b1100 (
b1100 7
b100 &
#45
b1010 9
b11010 )
b11010 1
b11011 2
b1100 3
b1 4
b1100 *
b1100 /
b1100 8
b100 :
b10100 !
b10100 ,
1.
1%
#50
b1001 9
b11001 )
b11001 1
b11000 2
0%
0$
b101 #
b101 (
b101 7
b110 "
b110 '
b110 5
b101 &
#55
0-
b1011 9
b1011 )
b1011 1
b1000 2
b100 3
b11 4
b11001 !
b11001 ,
b1001 :
b101 *
b101 /
b101 8
b110 +
b110 0
b110 6
1%
#60
0%
b111 #
b111 (
b111 7
b101 "
b101 '
b101 5
b110 &
#65
b1100 9
b1100 )
b1100 1
b1110 2
b101 3
b10 4
b101 +
b101 0
b101 6
b111 *
b111 /
b111 8
b1011 :
b1011 !
b1011 ,
0.
1%
#70
0%
b10 #
b10 (
b10 7
b1111 "
b1111 '
b1111 5
b111 &
#75
1-
b1 9
b10001 )
b10001 1
b11100 2
b10 3
b1101 4
b1100 !
b1100 ,
b1100 :
b10 *
b10 /
b10 8
b1111 +
b1111 0
b1111 6
1%
#80
0%
b101 #
b101 (
b101 7
b1000 "
b1000 '
b1000 5
b1000 &
#85
0-
b1101 9
b1101 )
b1101 1
b0 2
b0 3
b1000 +
b1000 0
b1000 6
b101 *
b101 /
b101 8
b1 :
b10001 !
b10001 ,
1.
1%
#90
b1110 9
b1110 )
b1110 1
b11 2
0%
1$
b1101 #
b1101 (
b1101 7
b1101 "
b1101 '
b1101 5
b1001 &
#95
1-
b1011 9
b11011 )
b11011 1
b11011 2
b1101 3
b0 4
0.
b1110 !
b1110 ,
b1110 :
b1101 *
b1101 /
b1101 8
b1101 +
b1101 0
b1101 6
1%
#100
0%
b1010 &
